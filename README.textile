h2. (Forked) DynamicQuery

Copyright Â© 2011 Takeshi KIRIYA (aka takeshik), All rights reserved.
This code is originally written by Microsoft Corporation.

DynamicQuery, originally a sample code from Microsoft, is a library to do LINQ
operations and to construct expression trees with string.
You can download original DynamicQuery source code and document from:

http://code.msdn.microsoft.com/cs2008samples

This is forked version of DynamicQuery.

h3. Samples

Below three expressions are the same meanings.

<pre>
// DynamicQuery (Execute method)
Enumerable.Range(0, 100).AsQueryable()
    .Execute("it.Zip(Enumerable.Range(0, 100).Reverse(), 'x * y').Distinct(). OrderBy('it desc')");

// DynamicQuery (Query operators)
Enumerable.Range(0, 100).AsQueryable()
    .Zip(Enumerable.Range(0, 100).Reverse(), "x + y")
    .Distinct()
    .OrderBy("it desc");

// Normal LINQ code
Enumerable.Range(0, 100)
    .Zip(Enumerable.Range(0, 100), (x, y) => x * y)
    .Reverse()
    .Distinct()
    .OrderByDescending(n => n);
</pre>

h3. Added Features

* Implement most standard query operators.
* Support to call extension methods, including LINQ methods.
* Support to call methods with "params" arguments.
* Add predefined types (Regex, Enumerable, etc.).
* Expand the expression of string literals, you can describe strings like @'this is string'@.
Character literals are still describable, if inner text in @'...'@ is only one character.
* Rename @DynamicExpression@ class to @DynamicExpressions@, since it conflicts with
@System.Linq.Expressions.DynamicExpression@.

h3. Removed Features

* "Subset of the Standard Query Operators" (like @Orders.Any(Total >= 1000)@) is removed
since it conflicts with extension methods.

h3. Planning Features

* Add Utility methods (Construct arrays, type objects, lambdas, etc., in code string).
* Extend language features.
* Support @dynamic@ objects.
* And so on.

h3. Licensing

This source code is licensed under the Microsoft Public License (Ms-PL), same as original code.