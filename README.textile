h2. TriDQL - Dynamic Dramatic Drastic Querying Language

Copyright Â© 2011 Takeshi KIRIYA (aka takeshik), All rights reserved.
TriDQL is a fork of DynamicQuery, originally written by Microsoft Corporation.

TriDQL, originally a sample code from Microsoft, is a mini-language library to do LINQ
operations and to construct expression trees with string.
You can download original DynamicQuery source code and document from:

http://code.msdn.microsoft.com/cs2008samples

h3. Samples

Below three expressions are the same meanings.

<pre>
// DynamicQuery (Query method: IQueryable -> IQueryable)
Enumerable.Range(0, 100).AsQueryable()
	.Query("it.Zip(Enumerable.Range(0, 100).Reverse(), 'x * y').Distinct(). OrderBy('it desc')");

// DynamicQuery (Query operators)
Enumerable.Range(0, 100).AsQueryable()
	.Zip(Enumerable.Range(0, 100).Reverse(), "x + y")
	.Distinct()
	.OrderBy("it desc");

// Normal LINQ code
Enumerable.Range(0, 100).AsQueryable()
	.Zip(Enumerable.Range(0, 100), (x, y) => x * y)
	.Reverse()
	.Distinct()
	.OrderByDescending(n => n);
</pre>

And also, you can use this as a language!

<pre>
#import("System.Console");
#var("x", "System.Int32");
#var("e", "System.Linq.IQueryable");
x := Int32.Parse(Console.ReadLine());
e := Enumerable.Range(0, x).AsQueryable();
#var("q", "System.String");
q := Console.ReadLine();
e.Query(q).Select(
	"#import("System.Console"); Console.WriteLine(Int32(it)); 0"
).Run()
</pre>

h3. Added Features

* Implement most standard query operators.
* Support to call extension methods, including LINQ methods.
* Support to call methods with "params" arguments.
* Add predefined types (Regex, Enumerable, etc.).
* Expand the expression of string literals, you can describe strings like @'this is string'@.
Character literals are still describable, if inner text in @'...'@ is only one character.
* Add operators: Assign (@:=@) and Block (@;@).
* Add some "eval-time" functions starts with @#@, import types and declare variables.

h3. Removed Features

* "Subset of the Standard Query Operators" (like @Orders.Any(Total >= 1000)@) is removed
since it conflicts with extension methods.

h3. Planning Features

* Add Utility methods (Construct arrays, type objects, lambdas, etc., in code string).
* Extend language features.
* Support @dynamic@ objects.
* Support comments.
* Support to run on Mono.
* And so on.

h3. Licensing

This source code is licensed under the Microsoft Public License (Ms-PL), same as original code.